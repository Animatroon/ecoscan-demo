// –ú–æ–¥—É–ª—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Ö–æ–¥–æ–≤
class WasteScanner {
    constructor() {
        this.camera = null;
        this.canvas = null;
        this.context = null;
        this.isScanning = false;
        this.wasteDatabase = this.initWasteDatabase();
        this.aiScanner = null; // –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ
        this.init();
    }

    init() {
        this.setupCamera();
        this.setupCanvas();
        this.bindEvents();
        this.initAIScanner();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É
        this.initCamera();
    }

    async initAIScanner() {
        // –ñ–¥–µ–º, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è TensorFlow.js
        if (typeof tf !== 'undefined' && typeof mobilenet !== 'undefined') {
            this.aiScanner = new AIScanner();
        } else {
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            setTimeout(() => this.initAIScanner(), 1000);
        }
    }

    setupCamera() {
        this.camera = document.getElementById('camera-preview');
        if (!this.camera) {
            console.error('Camera element not found');
            return;
        }
    }

    setupCanvas() {
        // –°–æ–∑–¥–∞—Ç—å –Ω–µ–≤–∏–¥–∏–º—ã–π canvas –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        this.canvas = document.createElement('canvas');
        this.context = this.canvas.getContext('2d');
        this.canvas.style.display = 'none';
        document.body.appendChild(this.canvas);
    }

    bindEvents() {
        const captureBtn = document.getElementById('capture-btn');
        const scanAgainBtn = document.getElementById('scan-again-btn');

        if (captureBtn) {
            captureBtn.addEventListener('click', () => {
                this.captureAndAnalyze();
            });
        }

        if (scanAgainBtn) {
            scanAgainBtn.addEventListener('click', () => {
                this.resetScan();
            });
        }
    }

    async initCamera() {
        try {
            console.log('üé• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                throw new Error('Camera API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–∞–º–µ—Ä–µ
            if (window.ecoScanApp) {
                window.ecoScanApp.showNotification('üìπ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ...', 'info');
            }

            // –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            const stream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: false
            });

            if (this.camera) {
                this.camera.srcObject = stream;
                
                // –ñ–¥–µ–º, –ø–æ–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
                return new Promise((resolve, reject) => {
                    this.camera.onloadedmetadata = () => {
                        this.camera.play()
                            .then(() => {
                                console.log('‚úÖ –ö–∞–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                                if (window.ecoScanApp) {
                                    window.ecoScanApp.showNotification('‚úÖ –ö–∞–º–µ—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!', 'success');
                                }
                                resolve();
                            })
                            .catch(reject);
                    };
                    
                    this.camera.onerror = (error) => {
                        console.error('–û—à–∏–±–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ video:', error);
                        reject(error);
                    };
                    
                    // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
                    setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ')), 15000);
                });
            } else {
                throw new Error('–≠–ª–µ–º–µ–Ω—Ç camera-preview –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if (window.ecoScanApp) {
                window.ecoScanApp.showNotification('‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º.', 'error');
            }
            
            this.showCameraError(error.message);
        }
    }

    showCameraError(errorMessage = '–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞') {
        const cameraContainer = document.querySelector('.camera-container');
        if (cameraContainer) {
            let errorText = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º';
            let solutionText = '';
            
            if (errorMessage.includes('Permission denied') || errorMessage.includes('NotAllowedError')) {
                errorText = '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
                solutionText = 'üîß –†–µ—à–µ–Ω–∏–µ: –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ –∫–∞–º–µ—Ä—ã –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø';
            } else if (errorMessage.includes('NotFoundError')) {
                errorText = '–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ';
                solutionText = 'üîß –†–µ—à–µ–Ω–∏–µ: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç';
            } else if (errorMessage.includes('NotReadableError')) {
                errorText = '–ö–∞–º–µ—Ä–∞ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º';
                solutionText = 'üîß –†–µ—à–µ–Ω–∏–µ: –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –∫–∞–º–µ—Ä—É';
            } else if (location.protocol === 'file:') {
                errorText = '–î–ª—è —Ä–∞–±–æ—Ç—ã –∫–∞–º–µ—Ä—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è HTTP/HTTPS –ø—Ä–æ—Ç–æ–∫–æ–ª';
                solutionText = 'üîß –†–µ—à–µ–Ω–∏–µ: –ó–∞–ø—É—Å—Ç–∏—Ç–µ start-server.bat –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000';
            }
            
            cameraContainer.innerHTML = `
                <div class="camera-error">
                    <i class="fas fa-camera-slash"></i>
                    <h3>üì∑ –ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</h3>
                    <p>${errorText}</p>
                    ${solutionText ? `<div class="solution-text">${solutionText}</div>` : ''}
                    <div class="error-details">
                        <small>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${errorMessage}</small>
                    </div>
                    
                    <div class="camera-troubleshooting">
                        <h4>üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</h4>
                        <ul>
                            <li>üîÑ –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (F5)</li>
                            <li>üîí –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ</li>
                            <li>üåê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTP —Å–µ—Ä–≤–µ—Ä (start-server.bat)</li>
                            <li>üì± –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä (Chrome, Firefox)</li>
                            <li>üéØ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–º–µ—Ä–∞ –Ω–µ –∑–∞–Ω—è—Ç–∞</li>
                        </ul>
                    </div>
                    
                    <div class="action-buttons">
                        <button id="retry-camera-btn" class="btn btn-secondary">
                            <i class="fas fa-redo"></i>
                            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                        <button id="demo-scan-btn" class="btn btn-primary">
                            <i class="fas fa-play"></i>
                            –î–µ–º–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                        </button>
                        <button id="test-camera-btn" class="btn btn-info">
                            <i class="fas fa-tools"></i>
                            –¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã
                        </button>
                    </div>
                </div>
            `;

            // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            const demoBtn = document.getElementById('demo-scan-btn');
            if (demoBtn) {
                demoBtn.addEventListener('click', () => {
                    this.runDemoScan();
                });
            }
            
            const retryBtn = document.getElementById('retry-camera-btn');
            if (retryBtn) {
                retryBtn.addEventListener('click', () => {
                    location.reload(); // –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                });
            }
            
            const testBtn = document.getElementById('test-camera-btn');
            if (testBtn) {
                testBtn.addEventListener('click', () => {
                    window.open('camera-test.html', '_blank');
                });
            }
        }
    }

    captureAndAnalyze() {
        if (this.isScanning) return;

        this.isScanning = true;
        this.showScanningState();

        // –ó–∞—Ö–≤–∞—Ç–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã
        this.captureImage()
            .then(imageData => this.analyzeWaste(imageData))
            .then(result => this.handleScanResult(result))
            .catch(error => this.handleScanError(error))
            .finally(() => {
                this.isScanning = false;
            });
    }

    captureImage() {
        return new Promise((resolve, reject) => {
            if (!this.camera || !this.canvas || !this.context) {
                reject(new Error('Camera or canvas not initialized'));
                return;
            }

            // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã canvas —Ä–∞–≤–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º –≤–∏–¥–µ–æ
            this.canvas.width = this.camera.videoWidth;
            this.canvas.height = this.camera.videoHeight;

            // –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ –Ω–∞ canvas
            this.context.drawImage(this.camera, 0, 0);

            // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageData = this.canvas.toDataURL('image/jpeg', 0.8);
            resolve(imageData);
        });
    }

    async analyzeWaste(imageData) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º AI —Å–∫–∞–Ω–µ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (this.aiScanner && this.aiScanner.isModelLoaded) {
            try {
                console.log('ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
                const result = await this.aiScanner.analyzeFromCamera();
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                const wasteInfo = result.wasteType ? window.ecoScanApp?.wasteDatabase[result.wasteType] : null;
                
                if (!result.success) {
                    return {
                        key: null,
                        name: '–û–±—ä–µ–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
                        type: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø',
                        material: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
                        instructions: ['–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç –±–ª–∏–∂–µ –∏–ª–∏ –ø—Ä–∏ –ª—É—á—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏'],
                        confidence: result.confidence,
                        image: imageData,
                        category: 'unknown',
                        recyclable: false,
                        hazardous: false,
                        isAI: result.isAI,
                        predictions: result.predictions,
                        analysis: result.analysis,
                        aiMessage: result.message,
                        success: false
                    };
                }
                
                return {
                    key: result.wasteType,
                    name: wasteInfo?.name || result.wasteType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø',
                    type: wasteInfo?.name || result.wasteType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø',
                    material: wasteInfo?.category || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª',
                    instructions: this.getRecyclingInstructions(result.wasteType),
                    confidence: result.confidence,
                    image: imageData,
                    category: result.wasteType || 'unknown',
                    recyclable: wasteInfo?.recyclable || false,
                    hazardous: false,
                    isAI: result.isAI,
                    predictions: result.predictions,
                    analysis: result.analysis,
                    aiMessage: result.message,
                    success: result.success
                };
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞:', error);
                return this.fallbackAnalysis(imageData);
            }
        } else {
            console.log('‚ö†Ô∏è AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º');
            return this.fallbackAnalysis(imageData);
        }
    }

    getRecyclingInstructions(wasteType) {
        const instructions = {
            'plastic_bottle': [
                '–°–Ω–∏–º–∏—Ç–µ –∫—Ä—ã—à–∫—É –∏ —ç—Ç–∏–∫–µ—Ç–∫—É',
                '–û–ø–æ–ª–æ—Å–Ω–∏—Ç–µ –±—É—Ç—ã–ª–∫—É –≤–æ–¥–æ–π',
                '–°–æ–∂–º–∏—Ç–µ –±—É—Ç—ã–ª–∫—É –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞',
                '–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–ª–∞—Å—Ç–∏–∫–∞',
                '–ö—Ä—ã—à–∫—É —Å–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –ø—É–Ω–∫—Ç –ø—Ä–∏–µ–º–∞'
            ],
            'glass_bottle': [
                '–°–Ω–∏–º–∏—Ç–µ –∫—Ä—ã—à–∫—É –∏ —ç—Ç–∏–∫–µ—Ç–∫—É',
                '–û–ø–æ–ª–æ—Å–Ω–∏—Ç–µ –±—É—Ç—ã–ª–∫—É –≤–æ–¥–æ–π',
                '–°–æ–∂–º–∏—Ç–µ –±—É—Ç—ã–ª–∫—É –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞',
                '–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–ª–∞—Å—Ç–∏–∫–∞',
                '–ö—Ä—ã—à–∫—É —Å–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –ø—É–Ω–∫—Ç –ø—Ä–∏–µ–º–∞'
            ],
            'paper': [
                '–£–¥–∞–ª–∏—Ç–µ —Å–∫—Ä–µ–ø–∫–∏ –∏ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã',
                '–†–∞–∑–æ—Ä–≤–∏—Ç–µ –Ω–∞ –º–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏',
                '–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ —Å–∏–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±—É–º–∞–≥–∏',
                '–ù–µ –º–æ—á–∏—Ç–µ –±—É–º–∞–≥—É',
                '–ñ–∏—Ä–Ω—É—é –±—É–º–∞–≥—É —É—Ç–∏–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ'
            ],
            'metal_can': [
                '–û–ø–æ–ª–æ—Å–Ω–∏—Ç–µ –±–∞–Ω–∫—É –æ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤',
                '–°–Ω–∏–º–∏—Ç–µ —ç—Ç–∏–∫–µ—Ç–∫—É –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ',
                '–°–ø–ª—é—â–∏—Ç–µ –±–∞–Ω–∫—É –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞',
                '–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –∂–µ–ª—Ç—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–µ—Ç–∞–ª–ª–∞',
                '–ê–ª—é–º–∏–Ω–∏–µ–≤—ã–µ –±–∞–Ω–∫–∏ –æ—Å–æ–±–µ–Ω–Ω–æ —Ü–µ–Ω–Ω—ã –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏'
            ],
            'battery': [
                '–ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–π—Ç–µ –≤ –æ–±—ã—á–Ω—ã–π –º—É—Å–æ—Ä!',
                '–ù–∞–π–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–∞—Ç–∞—Ä–µ–µ–∫',
                '–°–¥–∞–π—Ç–µ –≤ –ø—É–Ω–∫—Ç –ø—Ä–∏–µ–º–∞ –æ–ø–∞—Å–Ω—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤',
                '–ú–æ–∂–Ω–æ —Å–¥–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏',
                '–ë–∞—Ç–∞—Ä–µ–π–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–∫—Å–∏—á–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞'
            ],
            'electronics': [
                '–£–¥–∞–ª–∏—Ç–µ –≤—Å–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                '–ò–∑–≤–ª–µ–∫–∏—Ç–µ –±–∞—Ç–∞—Ä–µ–∏ –æ—Ç–¥–µ–ª—å–Ω–æ',
                '–ù–∞–π–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –ø—Ä–∏–µ–º–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏',
                '–ù–µ —Ä–∞–∑–±–∏—Ä–∞–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ',
                '–ú–Ω–æ–≥–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Å—Ç–∞—Ä—É—é —Ç–µ—Ö–Ω–∏–∫—É'
            ],
            'organic_waste': [
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∫–æ–º–ø–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                '–ú–æ–∂–Ω–æ –∑–∞–∫–æ–ø–∞—Ç—å –≤ —Å–∞–¥—É',
                '–î–æ–±–∞–≤—å—Ç–µ –≤ –¥–æ–º–∞—à–Ω–∏–π –∫–æ–º–ø–æ—Å—Ç–µ—Ä',
                '–ù–µ —Å–º–µ—à–∏–≤–∞–π—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –æ—Ç—Ö–æ–¥–∞–º–∏',
                '–ò–∑–±–µ–≥–∞–π—Ç–µ –º—è—Å–Ω—ã—Ö –∏ –º–æ–ª–æ—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –∫–æ–º–ø–æ—Å—Ç–µ'
            ]
        };

        return instructions[wasteType] || ['–ù–∞–π–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –ø—Ä–∏–µ–º–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç—Ö–æ–¥–æ–≤'];
    }

    fallbackAnalysis(imageData) {
        // –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–µ–º–æ-—Ä–µ–∂–∏–º)
        const wasteTypes = Object.keys(this.wasteDatabase);
        const randomType = wasteTypes[Math.floor(Math.random() * wasteTypes.length)];
        const wasteInfo = this.wasteDatabase[randomType];

        return {
            key: randomType,
            name: wasteInfo.name,
            type: wasteInfo.name,
            material: wasteInfo.material,
            instructions: wasteInfo.instructions,
            confidence: Math.random() * 0.3 + 0.7,
            image: imageData,
            category: randomType,
            recyclable: wasteInfo.recyclable,
            hazardous: wasteInfo.hazardous,
            isAI: false,
            predictions: [],
            analysis: [],
            aiMessage: '–î–µ–º–æ-—Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
            success: true
        };
    }

    simulateProcessing() {
        return new Promise(resolve => {
            // –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ò
            setTimeout(resolve, 2000 + Math.random() * 3000);
        });
    }

    showScanningState() {
        const captureBtn = document.getElementById('capture-btn');
        if (captureBtn) {
            captureBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            captureBtn.disabled = true;
        }

        const scanInstruction = document.querySelector('.scan-instruction');
        if (scanInstruction) {
            scanInstruction.textContent = '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...';
        }
    }

    handleScanResult(result) {
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
        const captureBtn = document.getElementById('capture-btn');
        if (captureBtn) {
            captureBtn.innerHTML = '<i class="fas fa-camera"></i>';
            captureBtn.disabled = false;
        }

        const scanInstruction = document.querySelector('.scan-instruction');
        if (scanInstruction) {
            scanInstruction.textContent = '–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å AI –∞–Ω–∞–ª–∏–∑–∞
        if (!result.success && result.isAI) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ AI –∞–Ω–∞–ª–∏–∑–∞
            if (window.ecoScanApp) {
                window.ecoScanApp.showNotification(result.aiMessage, 'warning');
            }
            return;
        }

        // –ü–µ—Ä–µ–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if (window.ecoScanApp) {
            window.ecoScanApp.handleScanResult(result);
        }

        console.log('Scan result:', result);
    }

    handleScanError(error) {
        console.error('Scan error:', error);
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UI
        const captureBtn = document.getElementById('capture-btn');
        if (captureBtn) {
            captureBtn.innerHTML = '<i class="fas fa-camera"></i>';
            captureBtn.disabled = false;
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (window.ecoScanApp) {
            window.ecoScanApp.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
        }
    }

    resetScan() {
        // –°–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const scanResult = document.getElementById('scan-result');
        if (scanResult) {
            scanResult.classList.add('hidden');
        }

        // –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.isScanning = false;
    }

    runDemoScan() {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∫–∞–º–µ—Ä—ã
        this.isScanning = true;
        this.showScanningState();

        // –°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const demoImageData = this.createDemoImage();
        
        this.analyzeWaste(demoImageData)
            .then(result => this.handleScanResult(result))
            .catch(error => this.handleScanError(error))
            .finally(() => {
                this.isScanning = false;
            });
    }

    createDemoImage() {
        // –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.canvas.width = 300;
        this.canvas.height = 300;
        
        // –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é —Ñ–∏–≥—É—Ä—É
        this.context.fillStyle = '#4CAF50';
        this.context.fillRect(0, 0, 300, 300);
        
        this.context.fillStyle = '#ffffff';
        this.context.font = '24px Arial';
        this.context.textAlign = 'center';
        this.context.fillText('DEMO', 150, 150);
        
        return this.canvas.toDataURL('image/jpeg', 0.8);
    }

    initWasteDatabase() {
        // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç—Ö–æ–¥–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        return {
            plastic_bottle: {
                name: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –±—É—Ç—ã–ª–∫–∞',
                material: '–ü–≠–¢ –ø–ª–∞—Å—Ç–∏–∫',
                recyclable: true,
                hazardous: false,
                instructions: [
                    '–°–Ω–∏–º–∏—Ç–µ –∫—Ä—ã—à–∫—É –∏ —ç—Ç–∏–∫–µ—Ç–∫—É',
                    '–û–ø–æ–ª–æ—Å–Ω–∏—Ç–µ –±—É—Ç—ã–ª–∫—É –≤–æ–¥–æ–π',
                    '–°–æ–∂–º–∏—Ç–µ –±—É—Ç—ã–ª–∫—É –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞',
                    '–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–ª–∞—Å—Ç–∏–∫–∞',
                    '–ö—Ä—ã—à–∫—É —Å–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –ø—É–Ω–∫—Ç –ø—Ä–∏–µ–º–∞'
                ]
            },
            glass_bottle: {
                name: '–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±—É—Ç—ã–ª–∫–∞',
                material: '–°—Ç–µ–∫–ª–æ',
                recyclable: true,
                hazardous: false,
                instructions: [
                    '–°–Ω–∏–º–∏—Ç–µ –≤—Å–µ —ç—Ç–∏–∫–µ—Ç–∫–∏',
                    '–û–ø–æ–ª–æ—Å–Ω–∏—Ç–µ –æ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ',
                    '–°–Ω–∏–º–∏—Ç–µ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –∫—Ä—ã—à–∫–∏',
                    '–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–µ–∫–ª–∞',
                    '–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –æ—Å—Ç—Ä—ã–º–∏ –∫—Ä–∞—è–º–∏'
                ]
            },
            paper: {
                name: '–ë—É–º–∞–≥–∞',
                material: '–¶–µ–ª–ª—é–ª–æ–∑–∞',
                recyclable: true,
                hazardous: false,
                instructions: [
                    '–£–¥–∞–ª–∏—Ç–µ —Å–∫—Ä–µ–ø–∫–∏ –∏ —Å–∫–æ–±—ã',
                    '–û—Ç–¥–µ–ª–∏—Ç–µ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ —á–∞—Å—Ç–∏',
                    '–ù–µ –º–æ—á–∏—Ç–µ –±—É–º–∞–≥—É',
                    '–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±—É–º–∞–≥–∏',
                    '–ò–∑–±–µ–≥–∞–π—Ç–µ –∂–∏—Ä–Ω–æ–π –∏ –≤–æ—Å–∫–æ–≤–æ–π –±—É–º–∞–≥–∏'
                ]
            },
            metal_can: {
                name: '–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –±–∞–Ω–∫–∞',
                material: '–ê–ª—é–º–∏–Ω–∏–π/–°—Ç–∞–ª—å',
                recyclable: true,
                hazardous: false,
                instructions: [
                    '–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–±–æ–¥–∏—Ç–µ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ',
                    '–û–ø–æ–ª–æ—Å–Ω–∏—Ç–µ –≤–æ–¥–æ–π',
                    '–°–Ω–∏–º–∏—Ç–µ –±—É–º–∞–∂–Ω—ã–µ —ç—Ç–∏–∫–µ—Ç–∫–∏',
                    '–°–ø–ª—é—â–∏—Ç–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞',
                    '–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–µ—Ç–∞–ª–ª–∞'
                ]
            },
            organic_waste: {
                name: '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç—Ö–æ–¥—ã',
                material: '–ë–∏–æ—Ä–∞–∑–ª–∞–≥–∞–µ–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                recyclable: true,
                hazardous: false,
                instructions: [
                    '–û—Ç–¥–µ–ª–∏—Ç–µ –æ—Ç —É–ø–∞–∫–æ–≤–∫–∏',
                    '–ò–∑–º–µ–ª—å—á–∏—Ç–µ –∫—Ä—É–ø–Ω—ã–µ –∫—É—Å–∫–∏',
                    '–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –∫–æ–º–ø–æ—Å—Ç–Ω—É—é —è–º—É –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä',
                    '–ò–∑–±–µ–≥–∞–π—Ç–µ –∂–∏—Ä–Ω—ã—Ö –∏ –º—è—Å–Ω—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤ –≤ –∫–æ–º–ø–æ—Å—Ç–µ',
                    '–†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–π—Ç–µ –∫–æ–º–ø–æ—Å—Ç'
                ]
            },
            battery: {
                name: '–ë–∞—Ç–∞—Ä–µ–π–∫–∞',
                material: '–¢–æ–∫—Å–∏—á–Ω—ã–µ –º–µ—Ç–∞–ª–ª—ã',
                recyclable: true,
                hazardous: true,
                instructions: [
                    '–ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–π—Ç–µ –≤ –æ–±—ã—á–Ω—ã–π –º—É—Å–æ—Ä',
                    '–ò–∑–æ–ª–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–∫–æ—Ç—á–µ–º',
                    '–°–¥–∞–π—Ç–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç –ø—Ä–∏–µ–º–∞ –±–∞—Ç–∞—Ä–µ–µ–∫',
                    '–ù–∞–π–¥–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π –º–∞–≥–∞–∑–∏–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏',
                    '–ë–∞—Ç–∞—Ä–µ–π–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–∫—Å–∏—á–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞'
                ]
            },
            electronics: {
                name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
                material: '–†–∞–∑–ª–∏—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                recyclable: true,
                hazardous: true,
                instructions: [
                    '–£–¥–∞–ª–∏—Ç–µ –≤—Å–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                    '–ò–∑–≤–ª–µ–∫–∏—Ç–µ –±–∞—Ç–∞—Ä–µ–∏ –æ—Ç–¥–µ–ª—å–Ω–æ',
                    '–°–¥–∞–π—Ç–µ –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä',
                    '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞',
                    '–ù–µ —Ä–∞–∑–±–∏—Ä–∞–π—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ'
                ]
            }
        };
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –æ—Ç—Ö–æ–¥–∞
    getWasteInfo(category) {
        return this.wasteDatabase[category] || null;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getAvailableCategories() {
        return Object.keys(this.wasteDatabase);
    }

    // –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    findByMaterial(material) {
        const results = [];
        for (const [key, value] of Object.entries(this.wasteDatabase)) {
            if (value.material.toLowerCase().includes(material.toLowerCase())) {
                results.push({ key, ...value });
            }
        }
        return results;
    }
}

// –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –¥–ª—è –æ—à–∏–±–∫–∏ –∫–∞–º–µ—Ä—ã
const cameraStyles = document.createElement('style');
cameraStyles.textContent = `
    .camera-error {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        color: white;
        text-align: center;
        padding: 2rem;
    }
    
    .camera-error i {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.7;
    }
    
    .camera-error h3 {
        margin-bottom: 1rem;
        font-size: 1.5rem;
    }
    
    .camera-error p {
        margin-bottom: 2rem;
        opacity: 0.8;
        line-height: 1.6;
    }
    
    .error-details {
        margin: 1rem 0;
        padding: 0.5rem;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 6px;
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.7);
    }
    
    .solution-text {
        background: rgba(76, 175, 80, 0.2);
        color: #81C784;
        padding: 0.75rem;
        border-radius: 8px;
        margin: 1rem 0;
        font-weight: 600;
    }
    
    .camera-troubleshooting {
        text-align: left;
        margin: 1.5rem 0;
        padding: 1rem;
        background: rgba(33, 150, 243, 0.1);
        border-radius: 8px;
        border-left: 4px solid #2196F3;
    }
    
    .camera-troubleshooting h4 {
        margin: 0 0 0.5rem 0;
        color: #2196F3;
        font-size: 1rem;
    }
    
    .camera-troubleshooting ul {
        margin: 0;
        padding-left: 1.5rem;
    }
    
    .camera-troubleshooting li {
        margin: 0.5rem 0;
        color: rgba(255, 255, 255, 0.9);
        font-size: 0.9rem;
    }
    
    .action-buttons {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        justify-content: center;
        margin-top: 1.5rem;
    }
    
    .action-buttons .btn {
        flex: 1;
        min-width: 120px;
        max-width: 200px;
    }
    
    .btn-info {
        background: #2196F3;
        color: white;
    }
    
    .btn-info:hover {
        background: #1976D2;
    }
`;
document.head.appendChild(cameraStyles);

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.WasteScanner = WasteScanner;

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.wasteScanner = null;
